Chapter 3 - Adding MongoDB to Node.js

Table of Contents
============================
1. Why MongoDB?
2. Downloading and installing MongoDB
3. Adding MongoDB to Express
4. Rewriting the upvote endpoint
5. Rewriting the comments endpoint




1. Why MongoDB?
======================================
Up to this point we have used a JavaScript array to represent an in-memory database. The problem is this data does not persist when the server is restarted.

To make data persist between server restarts is to use a database. One database that works well with JavaScript is "mongodb".

Mongodb is known as a "non-relational" database. It stores JSON-like data.
URL: https://www.mongodb.com

  * non-relational
  * no need to learn SQL
  * open-source and easy to use

This is different from a a traditional "relational" database where you would define fields ahead of time. A relational database also requires you to know how to use SQL syntax to create, read, update, and delete data.



2. Downloading and installing MongoDB
======================================
There a multiple ways to install MongoDB based on the operating system you are using. 

  * Mongodb community edition - installs locally on your computer/server
  * Mongodb Atlas - requires an account and is a cloud based service
  
The instructor provides a link in the video for installing "community edition" BUG: Instructor provides a link to version 6.0 (but he installs version 7.0).

MY NOTE: As of May 2025 community version 8.0 is (current)
  The instructor suggests installing 7.0 to help prevent errors in the course.
  Feel free to use whatever version you want to.

You can use the following updated links to download community edition:

  https://www.mongodb.com/docs/manual/administration/install-community/#std-label-install-mdb-community-edition

  https://mongodb.com/products/self-managed/community-edition


Go ahead and attempt to install community edition on your computer system.

Mac: 
  prerequisites:
    * xcode command-line tools
      To check to see if you have this installed, open a terminal
      and check the version:
       
      $ xcode-select -v
      xcode-select version 2409

      If this command fails, you can install xcode cmd-line tools at the
      terminal or you can install xcode from the app store:

      $ xcode-select --install 
    
    * Homebrew
      Install instructions: https://brew.sh/#install
      To check if Homebrew is installed:

      $ brew -v
      Homebrew 4.5.2
    
  Once the prerequisites are met you can continue with installing mongodb.

  1. In the Mac OS terminal use the following command 
     Note the "tap" command allows Homebrew add third-party repositories
     to Homebrew, allowing you to install additional software packages
     from those repositories.

     To list/see you current taps:
     $ brew tap

     To "tap" mongodb:
     $ brew tap mongodb/brew

     To list/see the current taps:
     $ brew tap
     mongodb/brew

  2. Update Homebrew

     $ brew update
     => updating Homebrew...
     Already up-to-date

  3. Install mongodb
     NOTE: On a Mac with Apple Processor the install creates directories:
     * /opt/homebrew/etc/mongod.conf
     * /opt/homebrew/var/log/mongodb
     * /opt/homebrew/var/mongodb

     $ brew install mongodb-community@8.0
     => Fetching dependencies...
     => Installing mongodb/brew/mongodb-community
     To start mongodb/brew/mongodb-community now and restart at login:
       brew services start mongodb/brew/mongodb-community

  4. To see where mongodb was installed you can type the following.
     
     $ brew --prefix

  5. To see which brew services are running:

    $ brew services list

If you installed MongoDb on Mac with Homebrew, starting the MongoDB daemon is different than the instructor's video. The instructor starts the MongoDB daemon with "mongod". Sadly this does not work on Mac!
Instead, you type some long ugly command to start it:

  $ brew services start mongodb/brew/mongodb-community

To stop it you type a similar long ugly command:

  $ brew services stop mongodb/brew/mongodb-community


Also, if you installed MongoDB on Mac with Homebrew, the "mongo" command doesn't work either. Instead, you use "mongosh".

Now lets start up the MongoDB daemon and use the mongo shell to create a new database (on a Mac computer).

1. In the VSCode integrated terminal start the mongodb daemon.
   This will run the daemon in the background.

  TERMINAL:

    back-end$ brew services start mongodb/brew/mongodb-community
    => Successfully started mongodb-community

    back-end$ brew services list
    NAME               STATUS   USER    FILE
    mongodb-community  started  shaun   ~/Lib...

2. Start up the MongoDB shell

    back-end$ mongosh
    test> 

3. Select/create a new database with the "use" command. 
   This command is followed by a name, "full-stack-react-db".
   This name is what we use in our app to access this database.

    TERMINAL:

     back-end$ mongosh
     Connecting to: mongodb://127.0.0.1:27017/?directConnection=true...
     ...
     > use full-stack-react-db
     switched to db full-stack-react-db

4. MongoDB uses the idea of "collections of documents".
   DOCS: https://www.mongodb.com/docs/manual/core/databases-and-collections/
   
   Data is stored as "documents", which are gathered together in "collections".
   In MongoDB, databases hold one or more collections of documents.
   If you are familiar with a relational db, collections = tables.
   In other words it is a collection of similar items.
   
   Using the MongoDB Shell, create a new "collection" named "articles", and insert multiple documents. In our case we will copy and paste the "articleInfo" Array from "src/server.js" into the "insertMany" method.
   The response (if successful) will be "acknowledged: true".
  
   
    TERMINAL:

     > use full-stack-react-db
     switched to db full-stack-react-db
     > db.articles.insertMany([
         { name: 'learn-react', upvotes: 0, comments: [] },
         { name: 'mongodb', upvotes: 0, comments: [] },
         { name: 'learn-node', upvotes: 0, comments: [] },
     ])

     {
         "acknowledged" : true,
         "insertedIds" : [
            ObjectId("6..."),
            ObjectId("6..."),
            ObjectId("6...")
         ]
     }
     >


If all went well you will see "acknowledged : true", which tells you that the JavaScript objects were inserted into the database.
You can verify this by finding all documents in the "articles" collection using the "find()" command.
Providing an empty pair of curly braces {} will return all documents:

  > db.articles.find({})

  // Or a pretty display
  > db.articles.find({}).pretty()


Before moving on lets learn about a couple more commands.
The "findOne" command is used to find a single document.
The {} passed to the command is used as a filter to find a specific document.

For example if we wanted to find a document with a "name" of "learn-node":

  TERMINAL 2:
    ...
    > db.findOne({name: "learn-node"})

    {
      "_id" : ObjectId("6..."),
      "name" : "learn-node",
      "upvotes" : 0,
      "comments" : [],
    }


Another example is if we wanted to find all articles with "upvotes" of 0.
You would use the "find()" command and a filter of {upvotes: 0}

  TERMINAL 2:
    ...
    > db.find({upvotes : 0})

    {
      "_id" : ObjectId("6..."), "name" : "learn-react", "upvotes" : 0, "comments" : [],
      "_id" : ObjectId("6..."), "name" : "learn-node", "upvotes" : 0, "comments" : [],
      "_id" : ObjectId("6..."), "name" : "mongodb", "upvotes" : 0, "comments" : [],
    }



NOTE: You can quit the MongoDB Shell "mongosh" with the commands (quit, exit) or by typing CTRL+C twice.
NOTE: To stop the mongoDB service on Mac (Homebrew install) you can type:
      $ brew services stop mongodb/brew/mongodb-community

      


3. Adding MongoDB to Express
======================================
To be able to interact with mongo db from within the node server, install the "mongodb" npm package.

  back-end$ npm install mongodb


First, lets import "MongoClient" & "ServerApiVersion" from the newly installed "mongodb" package;

[src/server.js]
  import express from 'express';
  import { MongoClient, ServerApiVersion } from 'mongodb';
  ...


Next, lets setup a new endpoint in our express server to display a single article.
We will get the "name" of the article from the request params.
Then we will attempt to connect to the Mongo database from our server rather than the terminal.

The uri depends on if you are connecting locally or through something like CodeSpaces.
If you installed Mongodb locally the address was displayed to you when you started up mongod (or brew service).
By default Mongodb uses a localhost address with a specific port. 
You might remember seeing, "Connecting to: mongodb://127.0.0.1:27017..." which tells us it is running on port "27017".

Pay attention to the fact we made the GET an "async" request.
In the body we use "await" to handle the response from connecting to the database.

[src/server.js]
  ...

  app.get('/api/articles/:name', async (req, res)=>{
    const { name } = req.params;

    const uri = "mongodb://127.0.0.1:21700";

    const client = new MongoClient(uri, {
      serverApi: {
        version: ServerApiVersion.v1,
        strict: true,
        deprecationErrors: true,
      }
    });
    
    await client.connect();

    const db = client.db('full-stack-react-db')

    const article = await db.collection('articles').findOne({name});

    res.json(article);
  });



OK. That is a lot to wire up.
1. import MongoClient & ServerApiVersion from "mongodb"
2. create an "async" request
3. grab the name from the url parameters
4. specify the uri for the mongodb server "mongodb://127.0.0.1:27017"
4. create a new MongoClient, passing the uri and a settings object
5. "await" the client connection to the database "await client.connect()"
6. select the database via the MongoClient "const db = client.db('full-stack-react-db')"
7. search for a mongodb document that matches the url parameter name
   "const article = db.collection('articles').findOne({name})"


After all that, lets test it out 
1. start up mongod (or brew service) if its not still running.
2. start the node server
3. open up Postman and make a request to the new endpoint to try it out.

  POSTMAN:
    GET    http://localhost:8000/api/articles/learn-node

  body      200 OK
  {
    "_id": "6...",
    "name": "learn-node",
    "upvotes": 0,
    "comments": [],
  }

If all went well you will see a single JSON object matching the url parameter name.
In this case we used "learn-node" to match the document in "articles" collection from the mongo database.

The next step will be to update our existing endpoints, then delete the "articleInfo" Array we used as an in-memory db.


4. Rewriting the upvote endpoint
======================================
5. Rewriting the comments endpoint
======================================