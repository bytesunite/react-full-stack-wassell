Chapter 1 - Creating a React Front-End

Table of contents
=================================
1. Why React?
2. Setting up a React project
3. Creating the home page
4. Adding React Router to an application
5. Using React Router links
6. URL parameters with React Router
7. Creating and linking the articles list
8. Creating a 404 page
9. Adding styles




1. Why React?
=========================================
The course starts off building the front-end using React.

React website: https://react.dev

You might wonder why you would use React over hand coding with HTML, CSS, and JavaScript.
React makes development easy without losing fine grained control that comes with hand coding. With React you create modular reusable components that can be arranged into a fully functional website.

Building a website can be done with limited to no development skills with tools such as:
* Wordpress
* Wix
* SquareSpace

If you are not a developer these tools are great solution for you.
However, this course is focused on developers that want to learn the MERN stack.



2. Setting up a React project
=========================================
The fastest way to setup a React app is with a generator, such as Vite.

Vite website: https://vite.dev

The instructor has his development environment setup using the following.
Aside from Node you can easily pick and choose your tools/environment.
- VSCode
- Codespaces (a virtual environment)
- Node

NOTE: The instructor uses Vite version 5.5.2 and suggests you do the same.

STEP 1
Create a new folder for this course site/project, such as "fullstack-react-app" or "blog-website".

  fullstack-react/

STEP 2
In VSCode open an integrated terminal to your parent project directory.
Then create a React app using Vite. Feel free to use Typescript if you want.

Option 1 (using the same Vite version 5.4.2 as the instructor, you may get security warnings)

  fullstack-react-app/$ npm create vite@5.5.2
  Project name: front-end
  Select a framework: React
  Select a variant: JavaScript

Option 2 (use the lastest version of Vite)

  fullstack-react-app/$ npm create vite@latest
  Project name: front-end
  Select a framework: React
  Select a variant: JavaScript 

You will now see a new folder "front-end" is created and instructions are given to change to this directory than run a command to install dependencies.

    fullstack-react-app/$ cd front-end
    fullstack-react-app/front-end/$ npm install
    ...added 196 packages...

Once you have installed the dependencies you have basic React app and scaffold.

    fullstack-react-app/
      front-end/
        public/
        src/
          assets/
          App.css
          App.jsx
          index.css
          main.jsx
        index.html
        package.json
        .gitignore
        README.md


When you look inside "App.jsx" you will see the default React App component that Vite created.
To see this in action you can start the development server from within the project folder.
In this case our project folder is "front-end".
Running "npm run dev" starts the server. Then you can open a browser to the provided url to see & interact with the React app.
NOTE: This is running locally. If you are using Codespaces you will have to go to the "Ports" tab in the interactive terminal to get the remote address/url by clicking the globe icon next to the "forwarded address" column.

    fullstack-react-app/front-end/$ npm run dev
    Local: http://localhost:5173


So if all went well you should see a simple page with 2 graphics (Vite and React) and a button to click to increment the count.

Now, lets explain "Hot Module Reloading"(HMR). This is a feature to aid in development where your saved updates are reflected immediately in the running browser. 
To see this in action:
a. Look at the currently running app in the browser
b. update and save "App.jsx" such changing some text like adding "Just did!".

   ...
     <p>
       Edit <code>src/App.jsx</code> and save to test HMR. Just did!
     </p>

c. After saving this file go back to the browser
   All your changes are immediately reflected


That is it. A basic React app is ready for you start building the front end part of this course.
NOTE: To stop the running server you can type CTRL + C
 


3. Creating the home page
=========================================
With a new React app created, the next step is to create some pages for our blog app.

STEP 1
Create a new folder "pages" to help organize our app pages.

  front-end/
    src/
      /pages


STEP 2
Create a new "HomePage" component for the homepage.

[src/pages/HomePage.jsx]
  export default function HomePage(){
    return (
      <h1>This is the Home Page!</h1>
    );
  }


STEP 3
Update "App.jsx" to render the new "HomePage" component when our React app is rendered in the browser.

[front-end/src/App.jsx]
  import './App.css';
  import HomePage from './pages/HomePage.jsx';

  function App(){
    return (
      <HomePage />
    )
  }

  export default App;



If all went well you should now see the HomePage rendered when viewing your React app in the browser

BROWSER: http://localhost:5173/

  This is the Home Page!


Notice however that "This is the Home Page!" is displayed for every url/route we go to.

BROWSER: http://localhost:5173/blah

  This is the Home Page!


This doesn't seem right, does it. We don't have any other pages yet so what is going on? 
Next, we will see how to create routes to render other pages of our site. 



4. Adding React Router to an application
=========================================
The next task is creating other pages and displaying them when visiting specific routes/urls.
We need logic to determine the current url before rendering the appropriate page/component.
There is a package that does this called "React Router DOM".
NOTE: The instructor is using version 6.4 of React Router DOM
      use "npm install react-router-dom@6.4" to mirror instructor

  front-end/$ npm install react-router-dom@6.4

  (or current) front-end/$ npm install react-router-dom


With React Router DOM installed, lets modify "App.jsx" to create a Browser Router.
Import "createBrowserRouter" and "RouterProvider".
Then create a routes array of objects where each object consists of a "path" & "element" property.
Then create a browser router by passing the routes array to "createBrowserRouter()".
Finally we can pass the results to the "router" prop of <RouterProvider>.

[front-end/src/App.jsx]
    import { createBrowserRouter, RouterProvider } from 'react-router-dom';
    import HomePage from './pages/HomePage.jsx';
    
    const routes = [
      {
        path: '/',
        element: <HomePage />,
      }
    ];
    
    const router = createBrowserRouter(routes);
    
    function App(){
      return (
        <RouterProvider router={router} />
      );
    }
    
    export default App;



Now if you start up the server and view the app at "http://localhost:5173/" it will display a similar results as before when the <HomePage> component was the only value returned by App.
The difference is when attempting to view an unknown route such as "http://localhost:5173/about".
You will get an error page, "Unexpected Application Error! 404 Not Found".

Before dealing with the 404 error, lets try building some other pages and add routes for them.
You can use the same template we used for the "HomePage" component by copying and pasting them into new components and modifying them with the appropriate function name and text.

[src/pages/AboutPage.jsx]
  export default function AboutPage() {
  return <h1>This is the About Page!</h1>;
}

Do the same for other pages in src/pages:
- ArticlesListPage.jsx
- ArticlePage.jsx


With the new pages, update "App.jsx" to import them and then add them to the array of routes.

[App.jsx]
    import { createBrowserRouter, RouterProvider } from 'react-router-dom';
    import './App.css';
    import HomePage from './pages/HomePage.jsx';
    import AboutPage from './pages/AboutPage.jsx';
    import ArticlePage from './pages/ArticlePage.jsx';
    import ArticlesListPage from './pages/ArticlesListPage.jsx';
    
    const routes = [
      {
        path: '/',
        element: <HomePage />,
      },
      {
        path: '/about/',
        element: <AboutPage />,
      },
      {
        path: '/articles',
        element: <ArticlesListPage />
      },
      {
        path: '/articles/individual',
        element: <ArticlePage />
      }
    ];

    const router = createBrowserRouter(routes);
    
    function App() {
      return <RouterProvider router={router} />;
    }
    
    export default App;


Now lets test this out by going to the routes & pages we created.
* http://localhost:5173/                     should show the HomePage
* http://localhost:5173/about                should show the AboutPage
* http://localhost:5173/articles             should show the ArticlesListPage
* http://localhost:5173/articles/individual  should show the ArticlePage
* http://localhost:5173/blah                 should throw an error 404 Not Found



5. Using React Router links
=========================================
Instead of typing urls in the browser lets create a NavBar. The NavBar will be displayed on every page, letting us navigate to other pages.

Using 'react-router-dom' we take advantage of the "Link" component. This component has a "to" prop that accepts the URL/path to a page.
You might wonder why a standard anchor tag <a> wouldn't work here. Using <a> would send a new request to the server. Using <Link> will not make a new server request and instead supports React's single page application convention. In a single page application a single page is updated to prevent needless requests to the server and increase speed/perfomance.

[src/Navbar.jsx]
    import { Link } from 'react-router-dom';

    export default function NavBar(){
      return (
        <nav>
          <ul>
            <li>
              <Link to='/'>Home</Link>
            </li>
            <li>
              <Link to='/about'>About</Link>
            </li>
            <li>
              <Link to='/articles'>Articles</Link>
            </li>
          </ul>
        </nav>
      )
    }


With the basic NavBar created we could import this component into each page, but this would be redundant.
  
  import NavBar from ...                   import NavBar from...
  function HomePage(){                     function AboutPage(){
    return (                                 return (
      <>                                       <>
        <NavBar />                             <NavBar />
        <h1>This is the Home Page!</h1>        <h1>This is the About Page!</h1>
      </>                                      </>
    )                                         )
  }                                          }

  ... and so on

Instead, it would be better to create a layout/template that each page can use for elements that remain the same, such as a header/navigation bar/footer/ etc.

You might think you could simply import the NavBar into "App.jsx" and place it above the <RouterProvider> like this, but it won't work:

// This will NOT work
[App.jsx]
   ...
   return (
    <>
      <NavBar />
      <RouterProvider router={router} />
    </>
   )


Nothing will be rendered in this case. If you use the browser dev tools you will see Errors such as:

    Uncaught Error: useHref() may be used only in the context of a <Router> component".


The reason is you can NOT use a <Link> component outside of a <RouterProvider> component.

One way to address this is to create a component for a layout. Then we can use the <Outlet> component from 'react-router-dom' to specify a region where each page content for each route will go.
NOTE: It does not need to be called Layout.

[src/Layout.jsx]
    import { Outlet } from 'react-router-dom';
    import Navbar from './NavBar.jsx';

    export default function Layout(){
      return (
        <>
          <NavBar />
          <Outlet />
        </>
      )
    }


So how this works is we will modify the routes in "App.jsx" to point to this Layout component, then place all our existing routes in a new property named "children".
What this does is render <Layout> for every route (which includes NavBar & Outlet) and then the "children" prop will populate the <Outlet> portion of Layout with the element specififed for each specific route.

[App.jsx]
    ...
    import Layout from './Layout.jsx';
    ...
    const routes = [{
      path: '/',
      element: <Layout />,
      children: [
        {
          path: '/',
          element: <HomePage />
        }, {
          path: '/about',
          element: <AboutPage />
        }, {
          path: '/articles',
          element: <ArticlesPage />
        }
      ],
    }];

    const router = createBrowserRouter(routes);

    return (
      <RouterProvider router={router}
    )


If all went well you should see the NavBar on each page, when you click a link it should display the individual pages (HomePage, AboutPage, ArticlesListPage)
Any unknown route will still display the Uncaught 404, which is dealt with in a later lesson.

REMINDER: an anchor tag <a> will make a request to the server and reload the page
  <Link> uses JavaScript behind the scenes to update the current page.




6. URL parameters with React Router
=========================================
7. Creating and linking the articles list
=========================================
8. Creating a 404 page
=========================================
9. Adding styles
=========================================
