Chapter 2 - Creating a Node.js Back-End

Table of Contents
=======================================
1. Why Node.js?
2. Setting up an Express server
3. Testing an Express server with Postman
4. Route parameters in Express
5. Upvoting articles
6. Automatically updating with Nodemon
7. Adding comments





1. Why Node.js?
=========================================
Node.js is a free, open-source, cross-platform JavaScript runtime environment that lets developers create servers, web apps, command line tools and scripts. 
URL: https://nodejs.org

In the past to be a full-stack developer you had to be fluent in more than one programming language. With Node.js you can now write a web application using one single language, JavaScript.

There are many npm libraries available to build Node.js servers. The most popular package is "express" (https://expressjs.com). Express is a fast, unopinionated, minimalist web framework. Express is easy to use and there are many plugins that work with Express, making it a good choice to use as a Node.js webserver.



2. Setting up an Express server
=========================================
Create a new folder named "back-end" next to the existing "front-end" folder within the project directory so we can explore Node.js

  fullstack-react-app/
    back-end/
    front-end/

Open the VSCode integrated terminal to the newly created "back-end" folder.
In order to tell npm we want this to be its own self contained project we can run "npm init" which will intialize a new project, creating a new "package.json" to keep track of the npm packages. 
NOTE: If you use the '-y' switch with 'npm init' it will automatically accept all the default values rather than prompt you for the project name, etc.

  back-end$ npm init -y

This creates a new "package.json"

  back-end/
    package.json


ATTENTION: (notes outside of instruction)
The instructor fails to mention setting up a ".gitignore" file. If you don't do this you will see that git has over 600 changes. You don't want to commit the "node_modules" folder, and a few other things. Earlier in the course we created a new React app with Vite. A ".gitignore" file was created similar to the following, which you can use as a template to create a one for "back-end". Here you can see "node_modules" as well as logs, etc.

[front-end/.gitignore]
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

  
-- end ATTENTION --


Express is NOT built into Node.js. Next, we need to install the "express" npm package. Express is NOT built into Node.js.

  back-end$ npm install express

With Express installed, lets setup a directory structure to help organize our code. Create a new folder "src" and within it create a new file "server.js".

  back-end/
    src/
      server.js
    package.json

ATTENTION (my own notes outside instruction)
URL: https://nodejs.org/api/modules.html
By default Node.js uses the "CommonJS" module system which uses "require()" to import modules, rather than "import".

   require('express');

Node.js recently started accepting ECMAScript modules that use "import" but you need to configure it.

    import express from 'express';

To configure Node to use "import" you can save files with a ".cjs" extension, or you can modify the 'package.json' by modifying the "type" property to say "module" instead of "commonjs".
-- end ATTENTION --




The "server.js" file will
- import the Express package
  WARNING: By default Node.js uses "require()" by default instead of "import".
- create a new instance of Express
- use the "get()" method to create an "endpoint",
  ('/hello'), which specifies a path
  to send a request to and a response is returned
- use the "listen()" method to tell express to
  specify a port to listen for requests and starts
  the server.

The get() method accepts 2 arguments
- an endpoint/path 
- a function with 2 arguments (request & response).

The send() method of the "response object" allows you
to send data back to the source of the request.

The listen() method accepts 2 arguments, and starts the server.
- the port number to listen for request on
- a function to call once the server is successfully running


NOTE: Instructor uses ECMA Script module syntax (import)
  If you get an error you can use Node.js Common JS
  SYNTAX: const express = require('express');

[server.js]

    import express from 'express';

    const app = express();

    app.get('/hello', (req,res)=>{
      res.send('Hello!');
    });

    app.listen(8000, ()=> {
      console.log('Server is listening on port 8000');
    })



So lets start this server by running the Node app and opening a web browser to "http://localhost:8000/hello".

    back-end$ node src/server.js
     (node:10148) Warning to load an ES Module, set "type": "module"
     in the package.json or use the .mjs extension.
     import express from 'express'
     ^^^^^^

This throws an error, telling us it does not understand the "import" syntax.
The instructor shows us how to modify the "package,json" file to update (or add)the "type" property with the value "module".

[package.json]
   ...
   type: 'module',
   ...


Once this change is made we can re-run our script and it should start the server.

    back-end$ node src/server.js
      Server is listening on port 8000


BROWSER: http://localhost:8000/hello

   Hello!





3. Testing an Express server with Postman
=========================================
The instructor finds in his experience developing the backend and testing it before building the frontend is easier than building a front end to test the backend.
He suggests using a tool called Postman:
URL: https://www.postman.com/downloads

After you download and install Postman on you computer, open the app and in the main page you should see a "Overview" tab with a + icon/tab. If you click the + it opens up an interface to make a request. It is possible to specify the request method (Get, Post, etc) and provide a URL. The "send" button will send the request to the server. You can use this to test the request,response.

NOTE (outside of instruction)
Currently Postman allows you to use it without an account but this may change.
Every once in awhile it asks you to sign in or "continue without account".
Signing up for crap is annoying/privacy issue, so hopefully free use continues.
-- end NOTE --


POSTMAN: interface

  Overview | +  <---( click the + )
  -------------
  ...


  Overview | Get Untitled Request
  -------------------------------
  Untitled Request
  Get v | Enter URL or paste text

  Params | Authorize
  Query Params
    Key              Value            Description

  --------------------------------------------------
  Response



If all went well and you have Postman installed and ready to go let's test out simple Express server.
NOTE: If you are using CodeSpaces you will need to go down to "Ports"/"Visibility" and toggle it to "public". If you using your own computer for your server, you don't need this step.

First, make sure your Express server is running/listening.
Second, open Postman and select GET, and type in a URL that matches our endpoint: "http://localhost:8000/hello"
Third, press SEND in the Postman app to make the request.

If all went well you will see a response "Hello" in Postman, along with other information such as the response code & status "200 OK", the est time it took, etc.:

   ...
   Body Cookies Headers Test Results        200 OK 26ms 232B
   [Pretty] Raw Preview Visualize HTML
   1 Hello!


The helpful thing Postman can provide is the many methods that come builtin that we can easily use to test our server (GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS)
For example a POST request is typically used for creating data on the server.

So right now our Express server has a single endpoint for a GET request to "/hello". So using Postman, send a "PUT" request to the same url. What you get is an ERROR page!

POSTMAN:

   POST  http://localhost:8000/hello

  Body  ...                        404 Not Found 246ms
  <!DOCTYPE html>
  ...
    Cannot POST /hello


Let's go back to our "server.js" file and update the GET endpoint & add an endpoint for a POST request by using the "post()" method and simple response message.

[back-end/src/server.js]
  ...
  app.get('/hello', (req, res)=>{
    res.send('Hello from a GET endpoint!');
  });

  app.post('/hello', (req, res)=>{
    res.send('Hello from a POST endpoint!');
  });
  ...


Save the file & restart the server.
Now in Postman make the same POST request to "http://localhost:8000/hello".
And if we make a GET request we see our updated endpoint too.

POSTMAN:
  POST   http://localhost:8000/hello
  
  Body Cookies Headers Test Results        200 OK 26ms 232B
  [Pretty] Raw Preview Visualize HTML
   1 Hello from a POST endpoint!


POSTMAN:
  GET   http://localhost:8000/hello
  
  Body Cookies Headers Test Results        200 OK 26ms 232B
  [Pretty] Raw Preview Visualize HTML
   1 Hello from a GET endpoint!



Before creating more routes lets look at how to send data with our requests. Regardless of whether we are using React or Postman (the client), it helps to know we can send data.
In Postman you can click on the "body" tab underneath your request, then select "raw" and select "json".

POSTMAN: interface

  GET  http://localhost:8000/hello
   
  Params  Authorization  Headers  [Body]  ...
    none  form-data  x-www-form-urlencoded  [raw]  binary  [JSON]  

    1 {
    2   "name": "Shaun",   
    3 }


Now before we send this request, go back and modify your POST endoint to use that sent data. The following will not work. An error is displayed saying it cannot find the property "name" on "undefined". So why?
WARNING: The following will NOT work!

[src/server.js]
  ...
  app.post('/hello', (req, res){
    res.send('Hello, ' + req.body.name + ' from a POST endpoint!');
  })


To make the above endpoint work we need help from some middleware to detect incomming data, parse the JSON, and assign the data to "req.body" for our app to use. The "use()" method is how you specify middleware to your Express app.
NOTE: The instructor does not go into detail but you can learn more online
      at the Express API : "express.json": 
      URL: https://expressjs.com/en/5x/api.html#express.json


[src/server.js]
  import express from 'express';

  const app = express();

  app.use(express.json());

  app.get('/hello', (req, res)=>{
    res.send('Hello from a GET endpoint!');
  });

  app.post('/hello', (req, res){
    res.send('Hello, ' + req.body.name + ' from a POST endpoint!');
  });


So with this update, save the file & restart the server.
Then open Postman and make a new POST request to our endpoint:

POSTMAN:
  POST  http://localhost:8000/hello

     [raw]      [JSON]
  {
    "name": "Shaun"
  }


  body                                      200 OK 240ms
  Hello, Shaun from a POST endpoint!


If you changed the raw JSON data you are sending it will be reflected. For example if you send {"name":"Bob"} then the response will be "Hello, Bob from a POST endpoint!".



4. Route parameters in Express
=========================================
Earlier in the course while learning React we used url/route parameters to gain access to an individual article. Express also allows us to do this.
So lets start simple with a route such as "/home/Shaun" and see if we can get access to "Shaun".

We can create a new endpoint that will use ":name" to grab the parameter. You don't have to use "name", any identifier will work. So the endpoint will look like '/hello/:name', which tells Express that "name" is a url parameter. The value is made available in the "params" property of the request object.

[src/server.js]
   ...
   app.get('/hello',(req,res)=>{
    res.send('Hello from a GET endpoint!');
   });

   app.get('/hello/:name', (req, res)=> {
     res.send('Hello, ' + req.params.name);
   });
   ...


Then restart your server and use Postman to make a GET request (without sending data), to our new endpoint.

  POSTMAN:
    GET http://localhost:8000/hello/Shaun

  body                     200 OK 20ms
  Hello, Shaun


Later, the instructor will demonstrate how to restart the server automatically when our source files have been changed.
Automatically restarting the server saves us time during development. One popular solution is Nodemon but recent versions of Node also added the -watch flag to offer similar functionality.



5. Upvoting articles
=========================================

6. Automatically updating with Nodemon
=========================================

7. Adding comments
=========================================
